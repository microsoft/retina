parameters:
- name: pipelineWorkspace
  type: string
- name: retinaOSSRepoName #not sure if really need but put for now, YEAH NEED BUT pass this variable for githuboss in 'main'
  type: string
- name: retinaEnterpriseRepoName
  type: string
- name: APP_INSIGHTS_ID
  type: string


stages:
  - stage: build
    displayName: Linux Buildx
    jobs:
      - job: prepare
        displayName: Setup
        pool:
          type: linux
        variables:
          ob_outputDirectory: $(Build.SourcesDirectory)/out
          OB_build_container: true
          ob_git_checkout: true
        steps:
          - checkout: ${{ parameters.retinaOSSRepoName }}
            fetchTags: true
          - script: |
              BUILD_NUMBER=$(Build.BuildNumber)            
              if [ "$(Build.Reason)" = "Schedule" ]; then
                echo "Pipeline triggered by schedule. Using 'latest' as tag."
                TAG="latest"
              else
                if [[ -z $(git tag --points-at HEAD) ]]; then
                  echo "No tag found on the current commit. Using commit hash as version."
                  TAG=$(git rev-parse --short HEAD)
                else
                  echo "Tag found on the current commit. Using it as version."
                  TAG=$(git tag --points-at HEAD)
                fi
              fi
              # pass the ADO pipeline variable
              echo "Tag version is: $TAG"
              echo "##vso[task.setvariable variable=TAG_VERSION;isOutput=true]$TAG"
              echo "##vso[task.setvariable variable=APP_INSIGHTS_ID;isOutput=true]${{ parameters.APP_INSIGHTS_ID }}"  
            name: setVariables 
            displayName: "Set environmental variables"
            condition: always()
          - checkout: ${{ parameters.retinaenterpriseRepoName }}
            fetchTags: true
            displayName: "Checkout Retina Enterprise"

          - task: CopyFiles@2
            displayName: Prepare sources for docker build
            inputs:
              SourceFolder: $(Build.SourcesDirectory)/${{ parameters.retinaOSSRepoName }}
              TargetFolder: '$(Build.SourcesDirectory)/out/${{ parameters.retinaOSSRepoName }}'
          - task: CopyFiles@2
            displayName: Enterprise for docker build
            inputs:
              SourceFolder: $(Build.SourcesDirectory)/${{ parameters.retinaEnterpriseRepoName }}
              TargetFolder: '$(Build.SourcesDirectory)/out/${{ parameters.retinaEnterpriseRepoName }}'          

      - template: template.docker-build.yml
        parameters:
          target: agent
          os: linux
          arch: amd64
          retinaOSSRepoName: ${{ parameters.retinaOSSRepoName }}
      - template: template.docker-build.yml
        parameters:
          target: init
          os: linux
          arch: amd64
          retinaOSSRepoName: ${{ parameters.retinaOSSRepoName }}
      - template: template.docker-build.yml
        parameters:
          target: operator
          os: linux
          arch: amd64
          retinaOSSRepoName: ${{ parameters.retinaOSSRepoName }}
      - template: template.docker-build.yml
        parameters:
          target: agent
          os: linux
          arch: arm64
          retinaOSSRepoName: ${{ parameters.retinaOSSRepoName }}
      - template: template.docker-build.yml
        parameters:
          target: init
          os: linux
          arch: arm64
          retinaOSSRepoName: ${{ parameters.retinaOSSRepoName }}
      - template: template.docker-build.yml
        parameters:
          target: operator
          os: linux
          arch: arm64
          retinaOSSRepoName: ${{ parameters.retinaOSSRepoName }}
      - template: template.docker-build.yml
        parameters:
          target: shell
          os: linux
          arch: amd64
          retinaOSSRepoName: ${{ parameters.retinaOSSRepoName }}
      - template: template.docker-build.yml
        parameters:
          target: kubectl
          os: linux
          arch: amd64
          retinaOSSRepoName: ${{ parameters.retinaOSSRepoName }}
      - template: template.docker-build.yml
        parameters:
          target: shell
          os: linux
          arch: arm64
          retinaOSSRepoName: ${{ parameters.retinaOSSRepoName }}
      - template: template.docker-build.yml
        parameters:
          target: kubectl
          os: linux
          arch: arm64
          retinaOSSRepoName: ${{ parameters.retinaOSSRepoName }}

      - job: builderForWindowsNative
        displayName: Builder for Windows Navite Image Build
        dependsOn: prepare
        condition: succeeded()
        pool:
          type: docker
          os: windows
          hostVersion: 1ESWindows2022
        variables:
          BUILD_NUMBER: $(Build.BuildId)
          WindowsContainerImage: 'onebranch.azurecr.io/windows/ltsc2022/vse2022:latest' # https://aka.ms/obpipelines/containers
          WINDOWS_VERSION: $[ dependencies.prepare.outputs['setVariables.TAG_VERSION'] ]
          APP_INSIGHTS_ID: $[ dependencies.prepare.outputs['setVariables.APP_INSIGHTS_ID'] ]
          ONEBRANCH_AME_ACR_LOGIN: onebranch.azurecr.io, cdpxdd5909284e0448cb9d3dee06c5f0e17f00.azurecr.io  # https://eng.ms/docs/products/onebranch/build/containerbasedworkflow/dockerimagesandacr/isolatedacr
          ob_git_checkout: true
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Artifacts'
            inputs:
              targetPath: $(Build.SourcesDirectory)/dst/drop_build_prepare
              artifact: drop_build_prepare

          - task: onebranch.pipeline.containercontrol@1
            displayName: "Login to source ACR"
            inputs:
                command: login
                acr_name: cdpxdd5909284e0448cb9d3dee06c5f0e17f00.azurecr.io   #https://eng.ms/docs/products/onebranch/build/containerbasedworkflow/dockerimagesandacr/isolatedacr
                tenant: AME

          - task: onebranch.pipeline.imagebuildinfo@1
            inputs:
              dockerFileRelPath: drop_build_prepare/${{ parameters.retinaEnterpriseRepoName }}/windows/docker/Dockerfile.windows-cgo
              arguments: "--build-arg VERSION=$(WINDOWS_VERSION) --target=builder"
              dockerFileContextPath: drop_build_prepare/${{ parameters.retinaEnterpriseRepoName }}
              repositoryName: retina-builder 
              compress: false 
              saveImageToPath: retina-builder-windows-amd64-$(WINDOWS_VERSION).tar
              enable_network: true
              #set tag to unique build number to avoid conflict
              build_tag: windows-amd64-$(BUILD_NUMBER)
              #push to isolated acr
              registry: cdpxdd5909284e0448cb9d3dee06c5f0e17f00.azurecr.io
              enable_isolated_acr_push: true
              enable_service_tree_acr_path: false

          - task: onebranch.pipeline.imagebuildinfo@1
            inputs:
              dockerFileRelPath: drop_build_prepare/${{ parameters.retinaOSSRepoName }}/controller/Dockerfile.windows-native
              # Generated image name is $(registry)/artifact/$(serviceTreeId)/$(buildType)/$(repositoryName) where serviceTreeIdand buildType (official, buddy) are controlled by build definition onboarding and rest is controlled by onebranch.pipeline.imagebuildinfo@1 task
              # https://eng.ms/docs/products/onebranch/build/containerbasedworkflow/dockerimagesandacr/builddockerimage
              arguments: "--build-arg BUILDER_IMAGE=cdpxdd5909284e0448cb9d3dee06c5f0e17f00.azurecr.io/buddy/retina-builder:windows-amd64-$(BUILD_NUMBER) --build-arg VERSION=$(WINDOWS_VERSION) --target=final --build-arg APP_INSIGHTS_ID=$(APP_INSIGHTS_ID)"
              dockerFileContextPath: drop_build_prepare/${{ parameters.retinaOSSRepoName }}
              repositoryName: retina-agent-win
              registry: ghcr.io/microsoft
              enable_network: true
              enable_service_tree_acr_path: false
              build_tag: windows-amd64-$(WINDOWS_VERSION)
              compress: true
              saveImageToPath: retina-agent-$(WINDOWS_VERSION)-windows-lstc2022-amd64.tar.gz 
              saveMetadataToPath: image-metadata-retina-agent-$(WINDOWS_VERSION)-windows-lstc2022-amd64.json 


