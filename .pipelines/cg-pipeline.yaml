pr: none
trigger: none

schedules:
  - cron: "0 0 * * *"
    displayName: Daily midnight Retina OSS CG pipeline
    branches:
      include:
        - main
stages:
  - stage: setup
    displayName: Linux Buildx
    jobs:
      - job: env
        displayName: Setup
        pool:
          name: "$(BUILD_POOL_NAME_DEFAULT)"
        steps:
          - checkout: self
            fetchTags: true
          - script: |
              BUILD_NUMBER=$(Build.BuildNumber)
              if [ "$(Build.Reason)" = "Schedule" ]
              then
                echo "##vso[task.setvariable variable=Tag;isOutput=true]latest"
              else
                echo "##vso[task.setvariable variable=Tag;isOutput=true]$(make version)"
              fi
            name: "EnvironmentalVariables"
            displayName: "Set environmental variables"
            condition: always()

      - job: retinaagentimages
        displayName: Build Retina Agent Images
        pool:
          name: "$(BUILD_POOL_NAME_DEFAULT)"
        strategy:
          matrix:
            agent-linux-arm:
              platform: "linux"
              arch: "arm64"
              target: "agent"

            agent-linux-amd64:
              platform: "linux"
              arch: "amd64"
              target: "agent"

            init-linux-arm:
              platform: "linux"
              arch: "arm64"
              target: "init"

            init-linux-amd64:
              platform: "linux"
              arch: "amd64"
              target: "init"

        steps:
          - checkout: self
            fetchTags: true
          - script: |
              set -euo pipefail
              echo "VERSION=$(make version)"
              export VERSION=$(make version)
              export APP_INSIGHTS_ID=$(APP_INSIGHTS_ID)
              mkdir -p ./output/images/$(platform)/$(arch)/$(year)
              make retina-image \
                AGENT_TARGETS=$(target) \
                TAG=$(make version) \
                APP_INSIGHTS_ID=$(APP_INSIGHTS_ID) \
                IMAGE_NAMESPACE=retina \
                PLATFORM=$(platform)/$(arch) \
                IMAGE_REGISTRY=ghcr.io/microsoft  \
                BUILDX_ACTION="-o type=docker,dest=./output/images/$(platform)/$(arch)/retina-$(target)-$VERSION-$(platform)-$(arch).tar"
            # make manifest-skopeo-archive IMAGE_ARCHIVE_DIR=$(Build.ArtifactStagingDirectory)/images
            displayName: "Build Retina Linux Images"

          - bash: |
              mkdir -p $(Build.ArtifactStagingDirectory)
              cp -r output/* $(Build.ArtifactStagingDirectory)
            displayName: "Copy binaries to the binaries artifact folder"

          - task: PublishBuildArtifacts@1
            inputs:
              artifactName: output
              pathtoPublish: "$(Build.ArtifactStagingDirectory)"
            condition: succeeded()

      - job: retinaoperatorimages
        displayName: Build Retina Operator Images
        pool:
          name: "$(BUILD_POOL_NAME_DEFAULT)"
        strategy:
          matrix:
            operator-linux-amd64:
              platform: "linux"
              arch: "amd64"

        steps:
          - checkout: self
            fetchTags: true
          - script: |
              set -euo pipefail
              echo "VERSION=$(make version)"
              export VERSION=$(make version)
              mkdir -p ./output/images/$(platform)/$(arch)/$(year)
              make retina-operator-image \
                TAG=$(make version) \
                APP_INSIGHTS_ID=$(APP_INSIGHTS_ID) \
                IMAGE_NAMESPACE=retina \
                PLATFORM=$(platform)/$(arch) \
                IMAGE_REGISTRY=ghcr.io/microsoft  \
                BUILDX_ACTION="-o type=docker,dest=./output/images/$(platform)/$(arch)/retina-operator-$VERSION-$(platform)-$(arch).tar"
            displayName: "Build Retina Operator Linux Images"

          - bash: |
              mkdir -p $(Build.ArtifactStagingDirectory)
              cp -r output/* $(Build.ArtifactStagingDirectory)
            displayName: "Copy binaries to the binaries artifact folder"

          - task: PublishBuildArtifacts@1
            inputs:
              artifactName: output
              pathtoPublish: "$(Build.ArtifactStagingDirectory)"
            condition: succeeded()

      - job: retinashellimages
        displayName: Build Retina Shell Images
        pool:
          name: "$(BUILD_POOL_NAME_DEFAULT)"
        strategy:
          matrix:
            shell-linux-arm:
              platform: "linux"
              arch: "arm64"

            shell-linux-amd64:
              platform: "linux"
              arch: "amd64"

        steps:
          - checkout: self
            fetchTags: true
          - script: |
              set -euo pipefail
              echo "VERSION=$(make version)"
              export VERSION=$(make version)
              mkdir -p ./output/images/$(platform)/$(arch)/$(year)
              make retina-shell-image \
                TAG=$(make version) \
                IMAGE_NAMESPACE=retina \
                PLATFORM=$(platform)/$(arch) \
                IMAGE_REGISTRY=ghcr.io/microsoft  \
                BUILDX_ACTION="-o type=docker,dest=./output/images/$(platform)/$(arch)/retina-shell-$VERSION-$(platform)-$(arch).tar"
            displayName: "Build Retina Shell Linux Images"

          - bash: |
              mkdir -p $(Build.ArtifactStagingDirectory)
              cp -r output/* $(Build.ArtifactStagingDirectory)
            displayName: "Copy binaries to the binaries artifact folder"

          - task: PublishBuildArtifacts@1
            inputs:
              artifactName: output
              pathtoPublish: "$(Build.ArtifactStagingDirectory)"
            condition: succeeded()

      - job: kubectlretinaimages
        displayName: Build Kubectl Retina Images
        pool:
          name: "$(BUILD_POOL_NAME_DEFAULT)"
        strategy:
          matrix:
            kubectl-linux-arm:
              platform: "linux"
              arch: "arm64"

            kubectl-linux-amd64:
              platform: "linux"
              arch: "amd64"

        steps:
          - checkout: self
            fetchTags: true
          - script: |
              set -euo pipefail
              echo "VERSION=$(make version)"
              export VERSION=$(make version)
              mkdir -p ./output/images/$(platform)/$(arch)/$(year)
              make kubectl-retina-image \
                TAG=$(make version) \
                IMAGE_NAMESPACE=retina \
                PLATFORM=$(platform)/$(arch) \
                IMAGE_REGISTRY=ghcr.io/microsoft  \
                BUILDX_ACTION="-o type=docker,dest=./output/images/$(platform)/$(arch)/kubectl-retina-$VERSION-$(platform)-$(arch).tar"
            displayName: "Build Kubectl Retina Linux Images"

          - bash: |
              mkdir -p $(Build.ArtifactStagingDirectory)
              cp -r output/* $(Build.ArtifactStagingDirectory)
            displayName: "Copy binaries to the binaries artifact folder"

          - task: PublishBuildArtifacts@1
            inputs:
              artifactName: output
              pathtoPublish: "$(Build.ArtifactStagingDirectory)"
            condition: succeeded()

      - job: windowsnative
        displayName: Build Retina Windows Images (native)
        pool:
          name: "$(BUILD_POOL_NAME_WINDOWS_DEFAULT)"
        steps:
          - checkout: self
            fetchTags: true

          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: "specific"
              project: $(BUILDER_ADO_PROECT)
              definition: $(BUILDER_ADO_DEFINITION_ID) # Replace with your build definition ID
              buildId: $(BUILDER_ADO_BUILD_ID)
              artifactName: $(BUILDER_ADO_ARTIFACTE_NAME) # Replace with your artifact name
              itemPattern: "**/*builder*.tar"
              downloadPath: '$(Pipeline.Workspace)\artifacts'

          - task: PowerShell@2
            displayName: "Load Builder Image"
            inputs:
              targetType: "inline"
              script: |
                $rootDir = "$(Pipeline.Workspace)\artifacts"
                $dockerImages = Get-ChildItem -Path $rootDir -Recurse -Filter *.tar
                foreach ($image in $dockerImages) {
                    Write-Host "Loading Docker image: $($image.FullName)"
                    docker load -i $image.FullName
                }

          - task: PowerShell@2
            displayName: "Build Retina Windows Image (LTSC2022)"
            inputs:
              targetType: "inline"
              script: |
                Import-Module -Name "$(Build.SourcesDirectory)\windows\docker\DockerBuildModule.psm1" -Force
                Build-RetinaAgentImage -fullBuilderImageName $(WINDOWS_BUILDER_IMAGE) -registry $(BUILD_REGISTRY) -appInsightsID $(APP_INSIGHTS_ID)
                Save-Image -imageName retina-agent -registry $(BUILD_REGISTRY)

          - task: PublishBuildArtifacts@1
            inputs:
              artifactName: output
              pathtoPublish: ./output
            condition: succeeded()
