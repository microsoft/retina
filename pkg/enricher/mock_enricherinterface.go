// autogenerated
//
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/microsoft/retina/pkg/enricher (interfaces: EnricherInterface)
//
// Generated by this command:
//
//	mockgen -destination=mock_enricherinterface.go -copyright_file=../lib/ignore_headers.txt -package=enricher github.com/microsoft/retina/pkg/enricher EnricherInterface
//

// Package enricher is a generated GoMock package.
package enricher

import (
	reflect "reflect"

	v1 "github.com/cilium/cilium/pkg/hubble/api/v1"
	container "github.com/cilium/cilium/pkg/hubble/container"
	gomock "go.uber.org/mock/gomock"
)

// MockEnricherInterface is a mock of EnricherInterface interface.
type MockEnricherInterface struct {
	ctrl     *gomock.Controller
	recorder *MockEnricherInterfaceMockRecorder
}

// MockEnricherInterfaceMockRecorder is the mock recorder for MockEnricherInterface.
type MockEnricherInterfaceMockRecorder struct {
	mock *MockEnricherInterface
}

// NewMockEnricherInterface creates a new mock instance.
func NewMockEnricherInterface(ctrl *gomock.Controller) *MockEnricherInterface {
	mock := &MockEnricherInterface{ctrl: ctrl}
	mock.recorder = &MockEnricherInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnricherInterface) EXPECT() *MockEnricherInterfaceMockRecorder {
	return m.recorder
}

// ExportReader mocks base method.
func (m *MockEnricherInterface) ExportReader() *container.RingReader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportReader")
	ret0, _ := ret[0].(*container.RingReader)
	return ret0
}

// ExportReader indicates an expected call of ExportReader.
func (mr *MockEnricherInterfaceMockRecorder) ExportReader() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportReader", reflect.TypeOf((*MockEnricherInterface)(nil).ExportReader))
}

// Run mocks base method.
func (m *MockEnricherInterface) Run() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run")
}

// Run indicates an expected call of Run.
func (mr *MockEnricherInterfaceMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockEnricherInterface)(nil).Run))
}

// Write mocks base method.
func (m *MockEnricherInterface) Write(arg0 *v1.Event) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Write", arg0)
}

// Write indicates an expected call of Write.
func (mr *MockEnricherInterfaceMockRecorder) Write(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockEnricherInterface)(nil).Write), arg0)
}
