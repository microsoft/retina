// autogenerated
//
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/microsoft/retina/pkg/controllers/daemon/standalone/source (interfaces: Source)
//
// Generated by this command:
//
//	mockgen -destination=mock_source.go -copyright_file=../lib/ignore_headers.txt -package=source github.com/microsoft/retina/pkg/controllers/daemon/standalone/source Source
//

// Package source is a generated GoMock package.
package source

import (
	reflect "reflect"

	common "github.com/microsoft/retina/pkg/common"
	gomock "go.uber.org/mock/gomock"
)

// MockSource is a mock of Source interface.
type MockSource struct {
	ctrl     *gomock.Controller
	recorder *MockSourceMockRecorder
}

// MockSourceMockRecorder is the mock recorder for MockSource.
type MockSourceMockRecorder struct {
	mock *MockSource
}

// NewMockSource creates a new mock instance.
func NewMockSource(ctrl *gomock.Controller) *MockSource {
	mock := &MockSource{ctrl: ctrl}
	mock.recorder = &MockSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSource) EXPECT() *MockSourceMockRecorder {
	return m.recorder
}

// GetAllEndpoints mocks base method.
func (m *MockSource) GetAllEndpoints() ([]*common.RetinaEndpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllEndpoints")
	ret0, _ := ret[0].([]*common.RetinaEndpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllEndpoints indicates an expected call of GetAllEndpoints.
func (mr *MockSourceMockRecorder) GetAllEndpoints() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllEndpoints", reflect.TypeOf((*MockSource)(nil).GetAllEndpoints))
}
