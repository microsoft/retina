syntax = "proto3";
package utils;

option go_package = "github.com/microsoft/retina/pkg/utils";

message RetinaMetadata {
    uint32 bytes = 1;

    // DNS metadata.
    DNSType dns_type = 2;
    uint32 num_responses = 3;

    // TCP ID. Either Tsval or Tsecr will be set.
    uint64 tcp_id = 4;

    // Drop reason in Retina.
    DropReason drop_reason = 5;

    // Sampling metadata, for packetparser.
    uint32 previously_observed_packets = 6;
    uint32 previously_observed_bytes = 7;
    map<string, uint32> previously_observed_tcp_flags = 8;
}

enum DNSType {
    UNKNOWN = 0;
    QUERY = 1;
    RESPONSE = 2;
}

// Ref: pkg/plugin/dropreason/_cprog/drop_reason.h.
enum DropReason {
    IPTABLE_RULE_DROP = 0;
    IPTABLE_NAT_DROP = 1;
    TCP_CONNECT_BASIC = 2;
    TCP_ACCEPT_BASIC = 3;
    TCP_CLOSE_BASIC = 4;
    CONNTRACK_ADD_DROP = 5;
    UNKNOWN_DROP = 6;
}

// HNS stats for standalone
enum VfpDirection {
    OUT = 0;
    IN = 1;
}

message EndpointStats {
    uint64 BytesReceived = 1;
    uint64 BytesSent = 2;
    uint64 DroppedPacketsIncoming = 3;
    uint64 DroppedPacketsOutgoing = 4;
    string EndpointID = 5;
    string InstanceID = 6;
    uint64 PacketsReceived = 7;
    uint64 PacketsSent = 8;
}

message VfpTcpConnectionStats {
    uint64 VerifiedCount = 1;
    uint64 TimedOutCount = 2;
    uint64 ResetCount = 3;
    uint64 ResetSynCount = 4;
    uint64 ClosedFinCount = 5;
    uint64 TcpHalfOpenTimeoutsCount = 6;
    uint64 TimeWaitExpiredCount = 7;
}

message VfpTcpPacketStats {
    uint64 SynPacketCount = 1;
    uint64 SynAckPacketCount = 2;
    uint64 FinPacketCount = 3;
    uint64 RstPacketCount = 4;
}

message VfpPacketDropStats {
    uint64 AclDropPacketCount = 1;
}

message VfpTcpStats {
    VfpTcpConnectionStats ConnectionCounters = 1;
    VfpTcpPacketStats PacketCounters = 2;
}

message VfpDirectedPortCounters {
    VfpDirection direction = 1;
    VfpTcpStats TcpCounters = 2;
    VfpPacketDropStats DropCounters = 3;
}

message VfpPortStatsData {
    VfpDirectedPortCounters In = 1;
    VfpDirectedPortCounters Out = 2;
}

message HNSStatsMetadata {
    EndpointStats EndpointStats = 1;
    VfpPortStatsData VfpPortStatsData = 2;
}
