// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: metadata_linux.proto

package utils

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DNSType int32

const (
	DNSType_UNKNOWN  DNSType = 0
	DNSType_QUERY    DNSType = 1
	DNSType_RESPONSE DNSType = 2
)

// Enum value maps for DNSType.
var (
	DNSType_name = map[int32]string{
		0: "UNKNOWN",
		1: "QUERY",
		2: "RESPONSE",
	}
	DNSType_value = map[string]int32{
		"UNKNOWN":  0,
		"QUERY":    1,
		"RESPONSE": 2,
	}
)

func (x DNSType) Enum() *DNSType {
	p := new(DNSType)
	*p = x
	return p
}

func (x DNSType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DNSType) Descriptor() protoreflect.EnumDescriptor {
	return file_metadata_linux_proto_enumTypes[0].Descriptor()
}

func (DNSType) Type() protoreflect.EnumType {
	return &file_metadata_linux_proto_enumTypes[0]
}

func (x DNSType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DNSType.Descriptor instead.
func (DNSType) EnumDescriptor() ([]byte, []int) {
	return file_metadata_linux_proto_rawDescGZIP(), []int{0}
}

// Ref: pkg/plugin/dropreason/_cprog/drop_reason.h.
type DropReason int32

const (
	DropReason_IPTABLE_RULE_DROP  DropReason = 0
	DropReason_IPTABLE_NAT_DROP   DropReason = 1
	DropReason_TCP_CONNECT_BASIC  DropReason = 2
	DropReason_TCP_ACCEPT_BASIC   DropReason = 3
	DropReason_TCP_CLOSE_BASIC    DropReason = 4
	DropReason_CONNTRACK_ADD_DROP DropReason = 5
	DropReason_UNKNOWN_DROP       DropReason = 6
)

// Enum value maps for DropReason.
var (
	DropReason_name = map[int32]string{
		0: "IPTABLE_RULE_DROP",
		1: "IPTABLE_NAT_DROP",
		2: "TCP_CONNECT_BASIC",
		3: "TCP_ACCEPT_BASIC",
		4: "TCP_CLOSE_BASIC",
		5: "CONNTRACK_ADD_DROP",
		6: "UNKNOWN_DROP",
	}
	DropReason_value = map[string]int32{
		"IPTABLE_RULE_DROP":  0,
		"IPTABLE_NAT_DROP":   1,
		"TCP_CONNECT_BASIC":  2,
		"TCP_ACCEPT_BASIC":   3,
		"TCP_CLOSE_BASIC":    4,
		"CONNTRACK_ADD_DROP": 5,
		"UNKNOWN_DROP":       6,
	}
)

func (x DropReason) Enum() *DropReason {
	p := new(DropReason)
	*p = x
	return p
}

func (x DropReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DropReason) Descriptor() protoreflect.EnumDescriptor {
	return file_metadata_linux_proto_enumTypes[1].Descriptor()
}

func (DropReason) Type() protoreflect.EnumType {
	return &file_metadata_linux_proto_enumTypes[1]
}

func (x DropReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DropReason.Descriptor instead.
func (DropReason) EnumDescriptor() ([]byte, []int) {
	return file_metadata_linux_proto_rawDescGZIP(), []int{1}
}

// HNS stats for standalone
type VfpDirection int32

const (
	VfpDirection_OUT VfpDirection = 0
	VfpDirection_IN  VfpDirection = 1
)

// Enum value maps for VfpDirection.
var (
	VfpDirection_name = map[int32]string{
		0: "OUT",
		1: "IN",
	}
	VfpDirection_value = map[string]int32{
		"OUT": 0,
		"IN":  1,
	}
)

func (x VfpDirection) Enum() *VfpDirection {
	p := new(VfpDirection)
	*p = x
	return p
}

func (x VfpDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VfpDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_metadata_linux_proto_enumTypes[2].Descriptor()
}

func (VfpDirection) Type() protoreflect.EnumType {
	return &file_metadata_linux_proto_enumTypes[2]
}

func (x VfpDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VfpDirection.Descriptor instead.
func (VfpDirection) EnumDescriptor() ([]byte, []int) {
	return file_metadata_linux_proto_rawDescGZIP(), []int{2}
}

type RetinaMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bytes uint32 `protobuf:"varint,1,opt,name=bytes,proto3" json:"bytes,omitempty"`
	// DNS metadata.
	DnsType      DNSType `protobuf:"varint,2,opt,name=dns_type,json=dnsType,proto3,enum=utils.DNSType" json:"dns_type,omitempty"`
	NumResponses uint32  `protobuf:"varint,3,opt,name=num_responses,json=numResponses,proto3" json:"num_responses,omitempty"`
	// TCP ID. Either Tsval or Tsecr will be set.
	TcpId uint64 `protobuf:"varint,4,opt,name=tcp_id,json=tcpId,proto3" json:"tcp_id,omitempty"`
	// Drop reason in Retina.
	DropReason DropReason `protobuf:"varint,5,opt,name=drop_reason,json=dropReason,proto3,enum=utils.DropReason" json:"drop_reason,omitempty"`
	// Sampling metadata, for packetparser.
	PreviouslyObservedPackets  uint32            `protobuf:"varint,6,opt,name=previously_observed_packets,json=previouslyObservedPackets,proto3" json:"previously_observed_packets,omitempty"`
	PreviouslyObservedBytes    uint32            `protobuf:"varint,7,opt,name=previously_observed_bytes,json=previouslyObservedBytes,proto3" json:"previously_observed_bytes,omitempty"`
	PreviouslyObservedTcpFlags map[string]uint32 `protobuf:"bytes,8,rep,name=previously_observed_tcp_flags,json=previouslyObservedTcpFlags,proto3" json:"previously_observed_tcp_flags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *RetinaMetadata) Reset() {
	*x = RetinaMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_linux_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetinaMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetinaMetadata) ProtoMessage() {}

func (x *RetinaMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_linux_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetinaMetadata.ProtoReflect.Descriptor instead.
func (*RetinaMetadata) Descriptor() ([]byte, []int) {
	return file_metadata_linux_proto_rawDescGZIP(), []int{0}
}

func (x *RetinaMetadata) GetBytes() uint32 {
	if x != nil {
		return x.Bytes
	}
	return 0
}

func (x *RetinaMetadata) GetDnsType() DNSType {
	if x != nil {
		return x.DnsType
	}
	return DNSType_UNKNOWN
}

func (x *RetinaMetadata) GetNumResponses() uint32 {
	if x != nil {
		return x.NumResponses
	}
	return 0
}

func (x *RetinaMetadata) GetTcpId() uint64 {
	if x != nil {
		return x.TcpId
	}
	return 0
}

func (x *RetinaMetadata) GetDropReason() DropReason {
	if x != nil {
		return x.DropReason
	}
	return DropReason_IPTABLE_RULE_DROP
}

func (x *RetinaMetadata) GetPreviouslyObservedPackets() uint32 {
	if x != nil {
		return x.PreviouslyObservedPackets
	}
	return 0
}

func (x *RetinaMetadata) GetPreviouslyObservedBytes() uint32 {
	if x != nil {
		return x.PreviouslyObservedBytes
	}
	return 0
}

func (x *RetinaMetadata) GetPreviouslyObservedTcpFlags() map[string]uint32 {
	if x != nil {
		return x.PreviouslyObservedTcpFlags
	}
	return nil
}

type EndpointStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesReceived          uint64 `protobuf:"varint,1,opt,name=BytesReceived,proto3" json:"BytesReceived,omitempty"`
	BytesSent              uint64 `protobuf:"varint,2,opt,name=BytesSent,proto3" json:"BytesSent,omitempty"`
	DroppedPacketsIncoming uint64 `protobuf:"varint,3,opt,name=DroppedPacketsIncoming,proto3" json:"DroppedPacketsIncoming,omitempty"`
	DroppedPacketsOutgoing uint64 `protobuf:"varint,4,opt,name=DroppedPacketsOutgoing,proto3" json:"DroppedPacketsOutgoing,omitempty"`
	EndpointID             string `protobuf:"bytes,5,opt,name=EndpointID,proto3" json:"EndpointID,omitempty"`
	InstanceID             string `protobuf:"bytes,6,opt,name=InstanceID,proto3" json:"InstanceID,omitempty"`
	PacketsReceived        uint64 `protobuf:"varint,7,opt,name=PacketsReceived,proto3" json:"PacketsReceived,omitempty"`
	PacketsSent            uint64 `protobuf:"varint,8,opt,name=PacketsSent,proto3" json:"PacketsSent,omitempty"`
}

func (x *EndpointStats) Reset() {
	*x = EndpointStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_linux_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndpointStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndpointStats) ProtoMessage() {}

func (x *EndpointStats) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_linux_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndpointStats.ProtoReflect.Descriptor instead.
func (*EndpointStats) Descriptor() ([]byte, []int) {
	return file_metadata_linux_proto_rawDescGZIP(), []int{1}
}

func (x *EndpointStats) GetBytesReceived() uint64 {
	if x != nil {
		return x.BytesReceived
	}
	return 0
}

func (x *EndpointStats) GetBytesSent() uint64 {
	if x != nil {
		return x.BytesSent
	}
	return 0
}

func (x *EndpointStats) GetDroppedPacketsIncoming() uint64 {
	if x != nil {
		return x.DroppedPacketsIncoming
	}
	return 0
}

func (x *EndpointStats) GetDroppedPacketsOutgoing() uint64 {
	if x != nil {
		return x.DroppedPacketsOutgoing
	}
	return 0
}

func (x *EndpointStats) GetEndpointID() string {
	if x != nil {
		return x.EndpointID
	}
	return ""
}

func (x *EndpointStats) GetInstanceID() string {
	if x != nil {
		return x.InstanceID
	}
	return ""
}

func (x *EndpointStats) GetPacketsReceived() uint64 {
	if x != nil {
		return x.PacketsReceived
	}
	return 0
}

func (x *EndpointStats) GetPacketsSent() uint64 {
	if x != nil {
		return x.PacketsSent
	}
	return 0
}

type VfpTcpConnectionStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VerifiedCount            uint64 `protobuf:"varint,1,opt,name=VerifiedCount,proto3" json:"VerifiedCount,omitempty"`
	TimedOutCount            uint64 `protobuf:"varint,2,opt,name=TimedOutCount,proto3" json:"TimedOutCount,omitempty"`
	ResetCount               uint64 `protobuf:"varint,3,opt,name=ResetCount,proto3" json:"ResetCount,omitempty"`
	ResetSynCount            uint64 `protobuf:"varint,4,opt,name=ResetSynCount,proto3" json:"ResetSynCount,omitempty"`
	ClosedFinCount           uint64 `protobuf:"varint,5,opt,name=ClosedFinCount,proto3" json:"ClosedFinCount,omitempty"`
	TcpHalfOpenTimeoutsCount uint64 `protobuf:"varint,6,opt,name=TcpHalfOpenTimeoutsCount,proto3" json:"TcpHalfOpenTimeoutsCount,omitempty"`
	TimeWaitExpiredCount     uint64 `protobuf:"varint,7,opt,name=TimeWaitExpiredCount,proto3" json:"TimeWaitExpiredCount,omitempty"`
}

func (x *VfpTcpConnectionStats) Reset() {
	*x = VfpTcpConnectionStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_linux_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VfpTcpConnectionStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VfpTcpConnectionStats) ProtoMessage() {}

func (x *VfpTcpConnectionStats) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_linux_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VfpTcpConnectionStats.ProtoReflect.Descriptor instead.
func (*VfpTcpConnectionStats) Descriptor() ([]byte, []int) {
	return file_metadata_linux_proto_rawDescGZIP(), []int{2}
}

func (x *VfpTcpConnectionStats) GetVerifiedCount() uint64 {
	if x != nil {
		return x.VerifiedCount
	}
	return 0
}

func (x *VfpTcpConnectionStats) GetTimedOutCount() uint64 {
	if x != nil {
		return x.TimedOutCount
	}
	return 0
}

func (x *VfpTcpConnectionStats) GetResetCount() uint64 {
	if x != nil {
		return x.ResetCount
	}
	return 0
}

func (x *VfpTcpConnectionStats) GetResetSynCount() uint64 {
	if x != nil {
		return x.ResetSynCount
	}
	return 0
}

func (x *VfpTcpConnectionStats) GetClosedFinCount() uint64 {
	if x != nil {
		return x.ClosedFinCount
	}
	return 0
}

func (x *VfpTcpConnectionStats) GetTcpHalfOpenTimeoutsCount() uint64 {
	if x != nil {
		return x.TcpHalfOpenTimeoutsCount
	}
	return 0
}

func (x *VfpTcpConnectionStats) GetTimeWaitExpiredCount() uint64 {
	if x != nil {
		return x.TimeWaitExpiredCount
	}
	return 0
}

type VfpTcpPacketStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SynPacketCount    uint64 `protobuf:"varint,1,opt,name=SynPacketCount,proto3" json:"SynPacketCount,omitempty"`
	SynAckPacketCount uint64 `protobuf:"varint,2,opt,name=SynAckPacketCount,proto3" json:"SynAckPacketCount,omitempty"`
	FinPacketCount    uint64 `protobuf:"varint,3,opt,name=FinPacketCount,proto3" json:"FinPacketCount,omitempty"`
	RstPacketCount    uint64 `protobuf:"varint,4,opt,name=RstPacketCount,proto3" json:"RstPacketCount,omitempty"`
}

func (x *VfpTcpPacketStats) Reset() {
	*x = VfpTcpPacketStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_linux_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VfpTcpPacketStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VfpTcpPacketStats) ProtoMessage() {}

func (x *VfpTcpPacketStats) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_linux_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VfpTcpPacketStats.ProtoReflect.Descriptor instead.
func (*VfpTcpPacketStats) Descriptor() ([]byte, []int) {
	return file_metadata_linux_proto_rawDescGZIP(), []int{3}
}

func (x *VfpTcpPacketStats) GetSynPacketCount() uint64 {
	if x != nil {
		return x.SynPacketCount
	}
	return 0
}

func (x *VfpTcpPacketStats) GetSynAckPacketCount() uint64 {
	if x != nil {
		return x.SynAckPacketCount
	}
	return 0
}

func (x *VfpTcpPacketStats) GetFinPacketCount() uint64 {
	if x != nil {
		return x.FinPacketCount
	}
	return 0
}

func (x *VfpTcpPacketStats) GetRstPacketCount() uint64 {
	if x != nil {
		return x.RstPacketCount
	}
	return 0
}

type VfpPacketDropStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AclDropPacketCount uint64 `protobuf:"varint,1,opt,name=AclDropPacketCount,proto3" json:"AclDropPacketCount,omitempty"`
}

func (x *VfpPacketDropStats) Reset() {
	*x = VfpPacketDropStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_linux_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VfpPacketDropStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VfpPacketDropStats) ProtoMessage() {}

func (x *VfpPacketDropStats) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_linux_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VfpPacketDropStats.ProtoReflect.Descriptor instead.
func (*VfpPacketDropStats) Descriptor() ([]byte, []int) {
	return file_metadata_linux_proto_rawDescGZIP(), []int{4}
}

func (x *VfpPacketDropStats) GetAclDropPacketCount() uint64 {
	if x != nil {
		return x.AclDropPacketCount
	}
	return 0
}

type  VfpTcpStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionCounters *VfpTcpConnectionStats `protobuf:"bytes,1,opt,name=ConnectionCounters,proto3" json:"ConnectionCounters,omitempty"`
	PacketCounters     *VfpTcpPacketStats     `protobuf:"bytes,2,opt,name=PacketCounters,proto3" json:"PacketCounters,omitempty"`
}

func (x *VfpTcpStats) Reset() {
	*x = VfpTcpStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_linux_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VfpTcpStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VfpTcpStats) ProtoMessage() {}

func (x *VfpTcpStats) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_linux_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VfpTcpStats.ProtoReflect.Descriptor instead.
func (*VfpTcpStats) Descriptor() ([]byte, []int) {
	return file_metadata_linux_proto_rawDescGZIP(), []int{5}
}

func (x *VfpTcpStats) GetConnectionCounters() *VfpTcpConnectionStats {
	if x != nil {
		return x.ConnectionCounters
	}
	return nil
}

func (x *VfpTcpStats) GetPacketCounters() *VfpTcpPacketStats {
	if x != nil {
		return x.PacketCounters
	}
	return nil
}

type VfpDirectedPortCounters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Direction    VfpDirection        `protobuf:"varint,1,opt,name=direction,proto3,enum=utils.VfpDirection" json:"direction,omitempty"`
	TcpCounters  *VfpTcpStats        `protobuf:"bytes,2,opt,name=TcpCounters,proto3" json:"TcpCounters,omitempty"`
	DropCounters *VfpPacketDropStats `protobuf:"bytes,3,opt,name=DropCounters,proto3" json:"DropCounters,omitempty"`
}

func (x *VfpDirectedPortCounters) Reset() {
	*x = VfpDirectedPortCounters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_linux_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VfpDirectedPortCounters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VfpDirectedPortCounters) ProtoMessage() {}

func (x *VfpDirectedPortCounters) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_linux_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VfpDirectedPortCounters.ProtoReflect.Descriptor instead.
func (*VfpDirectedPortCounters) Descriptor() ([]byte, []int) {
	return file_metadata_linux_proto_rawDescGZIP(), []int{6}
}

func (x *VfpDirectedPortCounters) GetDirection() VfpDirection {
	if x != nil {
		return x.Direction
	}
	return VfpDirection_OUT
}

func (x *VfpDirectedPortCounters) GetTcpCounters() *VfpTcpStats {
	if x != nil {
		return x.TcpCounters
	}
	return nil
}

func (x *VfpDirectedPortCounters) GetDropCounters() *VfpPacketDropStats {
	if x != nil {
		return x.DropCounters
	}
	return nil
}

type VfpPortStatsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	In  *VfpDirectedPortCounters `protobuf:"bytes,1,opt,name=In,proto3" json:"In,omitempty"`
	Out *VfpDirectedPortCounters `protobuf:"bytes,2,opt,name=Out,proto3" json:"Out,omitempty"`
}

func (x *VfpPortStatsData) Reset() {
	*x = VfpPortStatsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_linux_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VfpPortStatsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VfpPortStatsData) ProtoMessage() {}

func (x *VfpPortStatsData) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_linux_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VfpPortStatsData.ProtoReflect.Descriptor instead.
func (*VfpPortStatsData) Descriptor() ([]byte, []int) {
	return file_metadata_linux_proto_rawDescGZIP(), []int{7}
}

func (x *VfpPortStatsData) GetIn() *VfpDirectedPortCounters {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *VfpPortStatsData) GetOut() *VfpDirectedPortCounters {
	if x != nil {
		return x.Out
	}
	return nil
}

type HNSStatsMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EndpointStats    *EndpointStats    `protobuf:"bytes,1,opt,name=EndpointStats,proto3" json:"EndpointStats,omitempty"`
	VfpPortStatsData *VfpPortStatsData `protobuf:"bytes,2,opt,name=VfpPortStatsData,proto3" json:"VfpPortStatsData,omitempty"`
}

func (x *HNSStatsMetadata) Reset() {
	*x = HNSStatsMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_linux_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HNSStatsMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HNSStatsMetadata) ProtoMessage() {}

func (x *HNSStatsMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_linux_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HNSStatsMetadata.ProtoReflect.Descriptor instead.
func (*HNSStatsMetadata) Descriptor() ([]byte, []int) {
	return file_metadata_linux_proto_rawDescGZIP(), []int{8}
}

func (x *HNSStatsMetadata) GetEndpointStats() *EndpointStats {
	if x != nil {
		return x.EndpointStats
	}
	return nil
}

func (x *HNSStatsMetadata) GetVfpPortStatsData() *VfpPortStatsData {
	if x != nil {
		return x.VfpPortStatsData
	}
	return nil
}

var File_metadata_linux_proto protoreflect.FileDescriptor

var file_metadata_linux_proto_rawDesc = []byte{
	0x0a, 0x14, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x69, 0x6e, 0x75, 0x78,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x22, 0x86, 0x04,
	0x0a, 0x0e, 0x52, 0x65, 0x74, 0x69, 0x6e, 0x61, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x08, 0x64, 0x6e, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x73,
	0x2e, 0x44, 0x4e, 0x53, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x64, 0x6e, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x63, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x63, 0x70, 0x49, 0x64, 0x12, 0x32, 0x0a,
	0x0b, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x11, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0a, 0x64, 0x72, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x3e, 0x0a, 0x1b, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x6c, 0x79, 0x5f,
	0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73,
	0x6c, 0x79, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x12, 0x3a, 0x0a, 0x19, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x6c, 0x79, 0x5f,
	0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x6c, 0x79,
	0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x78, 0x0a,
	0x1d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x6c, 0x79, 0x5f, 0x6f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x5f, 0x74, 0x63, 0x70, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2e, 0x52, 0x65, 0x74,
	0x69, 0x6e, 0x61, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x65, 0x76,
	0x69, 0x6f, 0x75, 0x73, 0x6c, 0x79, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x54, 0x63,
	0x70, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x1a, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x6f, 0x75, 0x73, 0x6c, 0x79, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x54,
	0x63, 0x70, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x1a, 0x4d, 0x0a, 0x1f, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x6f, 0x75, 0x73, 0x6c, 0x79, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x54, 0x63, 0x70,
	0x46, 0x6c, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xcf, 0x02, 0x0a, 0x0d, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0d, 0x42, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x42, 0x79, 0x74, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x42, 0x79, 0x74, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x16,
	0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x49, 0x6e,
	0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x44, 0x72,
	0x6f, 0x70, 0x70, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x49, 0x6e, 0x63, 0x6f,
	0x6d, 0x69, 0x6e, 0x67, 0x12, 0x36, 0x0a, 0x16, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x4f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x4f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x53, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x22, 0xc1, 0x02, 0x0a, 0x15, 0x56, 0x66, 0x70,
	0x54, 0x63, 0x70, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x69, 0x6d, 0x65,
	0x64, 0x4f, 0x75, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0d, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24,
	0x0a, 0x0d, 0x52, 0x65, 0x73, 0x65, 0x74, 0x53, 0x79, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x52, 0x65, 0x73, 0x65, 0x74, 0x53, 0x79, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x46, 0x69,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x64, 0x46, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x18,
	0x54, 0x63, 0x70, 0x48, 0x61, 0x6c, 0x66, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18,
	0x54, 0x63, 0x70, 0x48, 0x61, 0x6c, 0x66, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x54, 0x69, 0x6d, 0x65,
	0x57, 0x61, 0x69, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x54, 0x69, 0x6d, 0x65, 0x57, 0x61, 0x69, 0x74,
	0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb9, 0x01, 0x0a,
	0x11, 0x56, 0x66, 0x70, 0x54, 0x63, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x79, 0x6e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x53, 0x79, 0x6e, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x79,
	0x6e, 0x41, 0x63, 0x6b, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x53, 0x79, 0x6e, 0x41, 0x63, 0x6b, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x46, 0x69, 0x6e, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0e, 0x46, 0x69, 0x6e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x26, 0x0a, 0x0e, 0x52, 0x73, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x52, 0x73, 0x74, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x44, 0x0a, 0x12, 0x56, 0x66, 0x70, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x72, 0x6f, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2e,
	0x0a, 0x12, 0x41, 0x63, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x41, 0x63, 0x6c, 0x44,
	0x72, 0x6f, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x9d,
	0x01, 0x0a, 0x0b, 0x56, 0x66, 0x70, 0x54, 0x63, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x4c,
	0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x75, 0x74, 0x69,
	0x6c, 0x73, 0x2e, 0x56, 0x66, 0x70, 0x54, 0x63, 0x70, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x12, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x40, 0x0a, 0x0e,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2e, 0x56, 0x66, 0x70,
	0x54, 0x63, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0e,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x22, 0xc1,
	0x01, 0x0a, 0x17, 0x56, 0x66, 0x70, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x6f,
	0x72, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x31, 0x0a, 0x09, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x75, 0x74, 0x69, 0x6c, 0x73, 0x2e, 0x56, 0x66, 0x70, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a,
	0x0b, 0x54, 0x63, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2e, 0x56, 0x66, 0x70, 0x54, 0x63,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0b, 0x54, 0x63, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x44, 0x72, 0x6f, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x75, 0x74, 0x69, 0x6c,
	0x73, 0x2e, 0x56, 0x66, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x72, 0x6f, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x0c, 0x44, 0x72, 0x6f, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x22, 0x74, 0x0a, 0x10, 0x56, 0x66, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x02, 0x49, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2e, 0x56, 0x66, 0x70, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x52, 0x02, 0x49, 0x6e, 0x12, 0x30, 0x0a, 0x03, 0x4f, 0x75, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2e, 0x56, 0x66, 0x70, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x03, 0x4f, 0x75, 0x74, 0x22, 0x93, 0x01, 0x0a, 0x10, 0x48, 0x4e, 0x53,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a,
	0x0d, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2e, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0d, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x10, 0x56, 0x66, 0x70,
	0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x75, 0x74, 0x69, 0x6c, 0x73, 0x2e, 0x56, 0x66, 0x70, 0x50,
	0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x10, 0x56, 0x66,
	0x70, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2a, 0x2f,
	0x0a, 0x07, 0x44, 0x4e, 0x53, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x02, 0x2a,
	0xa5, 0x01, 0x0a, 0x0a, 0x44, 0x72, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x15,
	0x0a, 0x11, 0x49, 0x50, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x44,
	0x52, 0x4f, 0x50, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x50, 0x54, 0x41, 0x42, 0x4c, 0x45,
	0x5f, 0x4e, 0x41, 0x54, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x54,
	0x43, 0x50, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x5f, 0x42, 0x41, 0x53, 0x49, 0x43,
	0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x43, 0x50, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54,
	0x5f, 0x42, 0x41, 0x53, 0x49, 0x43, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x43, 0x50, 0x5f,
	0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f, 0x42, 0x41, 0x53, 0x49, 0x43, 0x10, 0x04, 0x12, 0x16, 0x0a,
	0x12, 0x43, 0x4f, 0x4e, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x44,
	0x52, 0x4f, 0x50, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x5f, 0x44, 0x52, 0x4f, 0x50, 0x10, 0x06, 0x2a, 0x1f, 0x0a, 0x0c, 0x56, 0x66, 0x70, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x55, 0x54, 0x10, 0x00,
	0x12, 0x06, 0x0a, 0x02, 0x49, 0x4e, 0x10, 0x01, 0x42, 0x27, 0x5a, 0x25, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74,
	0x2f, 0x72, 0x65, 0x74, 0x69, 0x6e, 0x61, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x75, 0x74, 0x69, 0x6c,
	0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_metadata_linux_proto_rawDescOnce sync.Once
	file_metadata_linux_proto_rawDescData = file_metadata_linux_proto_rawDesc
)

func file_metadata_linux_proto_rawDescGZIP() []byte {
	file_metadata_linux_proto_rawDescOnce.Do(func() {
		file_metadata_linux_proto_rawDescData = protoimpl.X.CompressGZIP(file_metadata_linux_proto_rawDescData)
	})
	return file_metadata_linux_proto_rawDescData
}

var file_metadata_linux_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_metadata_linux_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_metadata_linux_proto_goTypes = []interface{}{
	(DNSType)(0),                    // 0: utils.DNSType
	(DropReason)(0),                 // 1: utils.DropReason
	(VfpDirection)(0),               // 2: utils.VfpDirection
	(*RetinaMetadata)(nil),          // 3: utils.RetinaMetadata
	(*EndpointStats)(nil),           // 4: utils.EndpointStats
	(*VfpTcpConnectionStats)(nil),   // 5: utils.VfpTcpConnectionStats
	(*VfpTcpPacketStats)(nil),       // 6: utils.VfpTcpPacketStats
	(*VfpPacketDropStats)(nil),      // 7: utils.VfpPacketDropStats
	(*VfpTcpStats)(nil),             // 8: utils.VfpTcpStats
	(*VfpDirectedPortCounters)(nil), // 9: utils.VfpDirectedPortCounters
	(*VfpPortStatsData)(nil),        // 10: utils.VfpPortStatsData
	(*HNSStatsMetadata)(nil),        // 11: utils.HNSStatsMetadata
	nil,                             // 12: utils.RetinaMetadata.PreviouslyObservedTcpFlagsEntry
}
var file_metadata_linux_proto_depIdxs = []int32{
	0,  // 0: utils.RetinaMetadata.dns_type:type_name -> utils.DNSType
	1,  // 1: utils.RetinaMetadata.drop_reason:type_name -> utils.DropReason
	12, // 2: utils.RetinaMetadata.previously_observed_tcp_flags:type_name -> utils.RetinaMetadata.PreviouslyObservedTcpFlagsEntry
	5,  // 3: utils.VfpTcpStats.ConnectionCounters:type_name -> utils.VfpTcpConnectionStats
	6,  // 4: utils.VfpTcpStats.PacketCounters:type_name -> utils.VfpTcpPacketStats
	2,  // 5: utils.VfpDirectedPortCounters.direction:type_name -> utils.VfpDirection
	8,  // 6: utils.VfpDirectedPortCounters.TcpCounters:type_name -> utils.VfpTcpStats
	7,  // 7: utils.VfpDirectedPortCounters.DropCounters:type_name -> utils.VfpPacketDropStats
	9,  // 8: utils.VfpPortStatsData.In:type_name -> utils.VfpDirectedPortCounters
	9,  // 9: utils.VfpPortStatsData.Out:type_name -> utils.VfpDirectedPortCounters
	4,  // 10: utils.HNSStatsMetadata.EndpointStats:type_name -> utils.EndpointStats
	10, // 11: utils.HNSStatsMetadata.VfpPortStatsData:type_name -> utils.VfpPortStatsData
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_metadata_linux_proto_init() }
func file_metadata_linux_proto_init() {
	if File_metadata_linux_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_metadata_linux_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetinaMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metadata_linux_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndpointStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metadata_linux_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VfpTcpConnectionStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metadata_linux_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VfpTcpPacketStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metadata_linux_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VfpPacketDropStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metadata_linux_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VfpTcpStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metadata_linux_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VfpDirectedPortCounters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metadata_linux_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VfpPortStatsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metadata_linux_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HNSStatsMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_metadata_linux_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_metadata_linux_proto_goTypes,
		DependencyIndexes: file_metadata_linux_proto_depIdxs,
		EnumInfos:         file_metadata_linux_proto_enumTypes,
		MessageInfos:      file_metadata_linux_proto_msgTypes,
	}.Build()
	File_metadata_linux_proto = out.File
	file_metadata_linux_proto_rawDesc = nil
	file_metadata_linux_proto_goTypes = nil
	file_metadata_linux_proto_depIdxs = nil
}
