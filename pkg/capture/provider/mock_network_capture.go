// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source=interface.go -destination=mock_network_capture.go -package=provider Interface
//

// Package provider is a generated GoMock package.
package provider

import (
	os "os"
	reflect "reflect"

	file "github.com/microsoft/retina/pkg/capture/file"
	gomock "go.uber.org/mock/gomock"
)

// MockNetworkCaptureProviderInterface is a mock of NetworkCaptureProviderInterface interface.
type MockNetworkCaptureProviderInterface struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkCaptureProviderInterfaceMockRecorder
}

// MockNetworkCaptureProviderInterfaceMockRecorder is the mock recorder for MockNetworkCaptureProviderInterface.
type MockNetworkCaptureProviderInterfaceMockRecorder struct {
	mock *MockNetworkCaptureProviderInterface
}

// NewMockNetworkCaptureProviderInterface creates a new mock instance.
func NewMockNetworkCaptureProviderInterface(ctrl *gomock.Controller) *MockNetworkCaptureProviderInterface {
	mock := &MockNetworkCaptureProviderInterface{ctrl: ctrl}
	mock.recorder = &MockNetworkCaptureProviderInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkCaptureProviderInterface) EXPECT() *MockNetworkCaptureProviderInterfaceMockRecorder {
	return m.recorder
}

// CaptureNetworkPacket mocks base method.
func (m *MockNetworkCaptureProviderInterface) CaptureNetworkPacket(filter string, duration, maxSize int, sigChan <-chan os.Signal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CaptureNetworkPacket", filter, duration, maxSize, sigChan)
	ret0, _ := ret[0].(error)
	return ret0
}

// CaptureNetworkPacket indicates an expected call of CaptureNetworkPacket.
func (mr *MockNetworkCaptureProviderInterfaceMockRecorder) CaptureNetworkPacket(filter, duration, maxSize, sigChan any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CaptureNetworkPacket", reflect.TypeOf((*MockNetworkCaptureProviderInterface)(nil).CaptureNetworkPacket), filter, duration, maxSize, sigChan)
}

// Cleanup mocks base method.
func (m *MockNetworkCaptureProviderInterface) Cleanup() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cleanup")
	ret0, _ := ret[0].(error)
	return ret0
}

// Cleanup indicates an expected call of Cleanup.
func (mr *MockNetworkCaptureProviderInterfaceMockRecorder) Cleanup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cleanup", reflect.TypeOf((*MockNetworkCaptureProviderInterface)(nil).Cleanup))
}

// CollectMetadata mocks base method.
func (m *MockNetworkCaptureProviderInterface) CollectMetadata() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CollectMetadata")
	ret0, _ := ret[0].(error)
	return ret0
}

// CollectMetadata indicates an expected call of CollectMetadata.
func (mr *MockNetworkCaptureProviderInterfaceMockRecorder) CollectMetadata() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectMetadata", reflect.TypeOf((*MockNetworkCaptureProviderInterface)(nil).CollectMetadata))
}

// Setup mocks base method.
func (m *MockNetworkCaptureProviderInterface) Setup(filename file.CaptureFilename) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setup", filename)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Setup indicates an expected call of Setup.
func (mr *MockNetworkCaptureProviderInterfaceMockRecorder) Setup(filename any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setup", reflect.TypeOf((*MockNetworkCaptureProviderInterface)(nil).Setup), filename)
}
