// Code generated by MockGen. DO NOT EDIT.
// Source: types_linux.go
//
// Generated by this command:
//
//	mockgen -source=types_linux.go -destination=mocks/mock_types.go -package=dropreason . IMap IMapIterator IPerfReader
//

// Package dropreason is a generated GoMock package.
package dropreason

import (
	reflect "reflect"

	ebpf "github.com/cilium/ebpf"
	perf "github.com/cilium/ebpf/perf"
	gomock "go.uber.org/mock/gomock"
)

// MockIMapIterator is a mock of IMapIterator interface.
type MockIMapIterator struct {
	ctrl     *gomock.Controller
	recorder *MockIMapIteratorMockRecorder
}

// MockIMapIteratorMockRecorder is the mock recorder for MockIMapIterator.
type MockIMapIteratorMockRecorder struct {
	mock *MockIMapIterator
}

// NewMockIMapIterator creates a new mock instance.
func NewMockIMapIterator(ctrl *gomock.Controller) *MockIMapIterator {
	mock := &MockIMapIterator{ctrl: ctrl}
	mock.recorder = &MockIMapIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMapIterator) EXPECT() *MockIMapIteratorMockRecorder {
	return m.recorder
}

// Err mocks base method.
func (m *MockIMapIterator) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockIMapIteratorMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockIMapIterator)(nil).Err))
}

// Next mocks base method.
func (m *MockIMapIterator) Next(keyOut, valueOut any) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next", keyOut, valueOut)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockIMapIteratorMockRecorder) Next(keyOut, valueOut any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockIMapIterator)(nil).Next), keyOut, valueOut)
}

// MockIMap is a mock of IMap interface.
type MockIMap struct {
	ctrl     *gomock.Controller
	recorder *MockIMapMockRecorder
}

// MockIMapMockRecorder is the mock recorder for MockIMap.
type MockIMapMockRecorder struct {
	mock *MockIMap
}

// NewMockIMap creates a new mock instance.
func NewMockIMap(ctrl *gomock.Controller) *MockIMap {
	mock := &MockIMap{ctrl: ctrl}
	mock.recorder = &MockIMapMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMap) EXPECT() *MockIMapMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockIMap) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockIMapMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIMap)(nil).Close))
}

// Iterate mocks base method.
func (m *MockIMap) Iterate() *ebpf.MapIterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Iterate")
	ret0, _ := ret[0].(*ebpf.MapIterator)
	return ret0
}

// Iterate indicates an expected call of Iterate.
func (mr *MockIMapMockRecorder) Iterate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Iterate", reflect.TypeOf((*MockIMap)(nil).Iterate))
}

// MockIPerfReader is a mock of IPerfReader interface.
type MockIPerfReader struct {
	ctrl     *gomock.Controller
	recorder *MockIPerfReaderMockRecorder
}

// MockIPerfReaderMockRecorder is the mock recorder for MockIPerfReader.
type MockIPerfReaderMockRecorder struct {
	mock *MockIPerfReader
}

// NewMockIPerfReader creates a new mock instance.
func NewMockIPerfReader(ctrl *gomock.Controller) *MockIPerfReader {
	mock := &MockIPerfReader{ctrl: ctrl}
	mock.recorder = &MockIPerfReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPerfReader) EXPECT() *MockIPerfReaderMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockIPerfReader) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockIPerfReaderMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIPerfReader)(nil).Close))
}

// Read mocks base method.
func (m *MockIPerfReader) Read() (perf.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read")
	ret0, _ := ret[0].(perf.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockIPerfReaderMockRecorder) Read() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockIPerfReader)(nil).Read))
}
