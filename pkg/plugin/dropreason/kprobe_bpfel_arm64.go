// Code generated by bpf2go; DO NOT EDIT.
//go:build arm64

package dropreason

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type kprobeDropReasonT uint32

type kprobeMapKey struct {
	Prefixlen uint32
	Data      uint32
}

type kprobeMetricsMapKey struct {
	DropType  uint16
	Padding   [2]uint8
	ReturnVal int32
}

type kprobeMetricsMapValue struct {
	Count uint64
	Bytes uint64
}

type kprobePacket struct {
	SrcIp       uint32
	DstIp       uint32
	SrcPort     uint16
	DstPort     uint16
	SkbLen      uint32
	ReturnVal   uint32
	DropType    uint16
	Proto       uint8
	InFiltermap bool
	Ts          uint64
}

// loadKprobe returns the embedded CollectionSpec for kprobe.
func loadKprobe() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_KprobeBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load kprobe: %w", err)
	}

	return spec, err
}

// loadKprobeObjects loads kprobe and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*kprobeObjects
//	*kprobePrograms
//	*kprobeMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadKprobeObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadKprobe()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// kprobeSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type kprobeSpecs struct {
	kprobeProgramSpecs
	kprobeMapSpecs
}

// kprobeSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type kprobeProgramSpecs struct {
	InetCskAccept           *ebpf.ProgramSpec `ebpf:"inet_csk_accept"`
	InetCskAcceptFexit      *ebpf.ProgramSpec `ebpf:"inet_csk_accept_fexit"`
	InetCskAcceptRet        *ebpf.ProgramSpec `ebpf:"inet_csk_accept_ret"`
	NfConntrackConfirm      *ebpf.ProgramSpec `ebpf:"nf_conntrack_confirm"`
	NfConntrackConfirmFexit *ebpf.ProgramSpec `ebpf:"nf_conntrack_confirm_fexit"`
	NfConntrackConfirmRet   *ebpf.ProgramSpec `ebpf:"nf_conntrack_confirm_ret"`
	NfHookSlow              *ebpf.ProgramSpec `ebpf:"nf_hook_slow"`
	NfHookSlowFexit         *ebpf.ProgramSpec `ebpf:"nf_hook_slow_fexit"`
	NfHookSlowRet           *ebpf.ProgramSpec `ebpf:"nf_hook_slow_ret"`
	NfNatInetFn             *ebpf.ProgramSpec `ebpf:"nf_nat_inet_fn"`
	NfNatInetFnFexit        *ebpf.ProgramSpec `ebpf:"nf_nat_inet_fn_fexit"`
	NfNatInetFnRet          *ebpf.ProgramSpec `ebpf:"nf_nat_inet_fn_ret"`
	TcpV4ConnectFexit       *ebpf.ProgramSpec `ebpf:"tcp_v4_connect_fexit"`
	TcpV4ConnectRet         *ebpf.ProgramSpec `ebpf:"tcp_v4_connect_ret"`
}

// kprobeMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type kprobeMapSpecs struct {
	RetinaDropreasonAcceptPids  *ebpf.MapSpec `ebpf:"retina_dropreason_accept_pids"`
	RetinaDropreasonDropPids    *ebpf.MapSpec `ebpf:"retina_dropreason_drop_pids"`
	RetinaDropreasonEvents      *ebpf.MapSpec `ebpf:"retina_dropreason_events"`
	RetinaDropreasonMetrics     *ebpf.MapSpec `ebpf:"retina_dropreason_metrics"`
	RetinaDropreasonNatdropPids *ebpf.MapSpec `ebpf:"retina_dropreason_natdrop_pids"`
	RetinaFilter                *ebpf.MapSpec `ebpf:"retina_filter"`
}

// kprobeObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadKprobeObjects or ebpf.CollectionSpec.LoadAndAssign.
type kprobeObjects struct {
	kprobePrograms
	kprobeMaps
}

func (o *kprobeObjects) Close() error {
	return _KprobeClose(
		&o.kprobePrograms,
		&o.kprobeMaps,
	)
}

// kprobeMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadKprobeObjects or ebpf.CollectionSpec.LoadAndAssign.
type kprobeMaps struct {
	RetinaDropreasonAcceptPids  *ebpf.Map `ebpf:"retina_dropreason_accept_pids"`
	RetinaDropreasonDropPids    *ebpf.Map `ebpf:"retina_dropreason_drop_pids"`
	RetinaDropreasonEvents      *ebpf.Map `ebpf:"retina_dropreason_events"`
	RetinaDropreasonMetrics     *ebpf.Map `ebpf:"retina_dropreason_metrics"`
	RetinaDropreasonNatdropPids *ebpf.Map `ebpf:"retina_dropreason_natdrop_pids"`
	RetinaFilter                *ebpf.Map `ebpf:"retina_filter"`
}

func (m *kprobeMaps) Close() error {
	return _KprobeClose(
		m.RetinaDropreasonAcceptPids,
		m.RetinaDropreasonDropPids,
		m.RetinaDropreasonEvents,
		m.RetinaDropreasonMetrics,
		m.RetinaDropreasonNatdropPids,
		m.RetinaFilter,
	)
}

// kprobePrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadKprobeObjects or ebpf.CollectionSpec.LoadAndAssign.
type kprobePrograms struct {
	InetCskAccept           *ebpf.Program `ebpf:"inet_csk_accept"`
	InetCskAcceptFexit      *ebpf.Program `ebpf:"inet_csk_accept_fexit"`
	InetCskAcceptRet        *ebpf.Program `ebpf:"inet_csk_accept_ret"`
	NfConntrackConfirm      *ebpf.Program `ebpf:"nf_conntrack_confirm"`
	NfConntrackConfirmFexit *ebpf.Program `ebpf:"nf_conntrack_confirm_fexit"`
	NfConntrackConfirmRet   *ebpf.Program `ebpf:"nf_conntrack_confirm_ret"`
	NfHookSlow              *ebpf.Program `ebpf:"nf_hook_slow"`
	NfHookSlowFexit         *ebpf.Program `ebpf:"nf_hook_slow_fexit"`
	NfHookSlowRet           *ebpf.Program `ebpf:"nf_hook_slow_ret"`
	NfNatInetFn             *ebpf.Program `ebpf:"nf_nat_inet_fn"`
	NfNatInetFnFexit        *ebpf.Program `ebpf:"nf_nat_inet_fn_fexit"`
	NfNatInetFnRet          *ebpf.Program `ebpf:"nf_nat_inet_fn_ret"`
	TcpV4ConnectFexit       *ebpf.Program `ebpf:"tcp_v4_connect_fexit"`
	TcpV4ConnectRet         *ebpf.Program `ebpf:"tcp_v4_connect_ret"`
}

func (p *kprobePrograms) Close() error {
	return _KprobeClose(
		p.InetCskAccept,
		p.InetCskAcceptFexit,
		p.InetCskAcceptRet,
		p.NfConntrackConfirm,
		p.NfConntrackConfirmFexit,
		p.NfConntrackConfirmRet,
		p.NfHookSlow,
		p.NfHookSlowFexit,
		p.NfHookSlowRet,
		p.NfNatInetFn,
		p.NfNatInetFnFexit,
		p.NfNatInetFnRet,
		p.TcpV4ConnectFexit,
		p.TcpV4ConnectRet,
	)
}

func _KprobeClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed kprobe_bpfel_arm64.o
var _KprobeBytes []byte
