// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/microsoft/retina/pkg/plugin/common (interfaces: ITracer)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_types.go -package=mocks . ITracer
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockITracer is a mock of ITracer interface.
type MockITracer struct {
	ctrl     *gomock.Controller
	recorder *MockITracerMockRecorder
}

// MockITracerMockRecorder is the mock recorder for MockITracer.
type MockITracerMockRecorder struct {
	mock *MockITracer
}

// NewMockITracer creates a new mock instance.
func NewMockITracer(ctrl *gomock.Controller) *MockITracer {
	mock := &MockITracer{ctrl: ctrl}
	mock.recorder = &MockITracerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITracer) EXPECT() *MockITracerMockRecorder {
	return m.recorder
}

// Attach mocks base method.
func (m *MockITracer) Attach(arg0 uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Attach", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Attach indicates an expected call of Attach.
func (mr *MockITracerMockRecorder) Attach(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Attach", reflect.TypeOf((*MockITracer)(nil).Attach), arg0)
}

// Close mocks base method.
func (m *MockITracer) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockITracerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockITracer)(nil).Close))
}

// Detach mocks base method.
func (m *MockITracer) Detach(arg0 uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Detach", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Detach indicates an expected call of Detach.
func (mr *MockITracerMockRecorder) Detach(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Detach", reflect.TypeOf((*MockITracer)(nil).Detach), arg0)
}

// SetEventHandler mocks base method.
func (m *MockITracer) SetEventHandler(arg0 any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetEventHandler", arg0)
}

// SetEventHandler indicates an expected call of SetEventHandler.
func (mr *MockITracerMockRecorder) SetEventHandler(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEventHandler", reflect.TypeOf((*MockITracer)(nil).SetEventHandler), arg0)
}
