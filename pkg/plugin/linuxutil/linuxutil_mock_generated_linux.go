// Code generated by MockGen. DO NOT EDIT.
// Source: types_linux.go
//
// Generated by this command:
//
//	mockgen -source=types_linux.go -destination=linuxutil_mock_generated_linux.go -package=linuxutil
//

// Package linuxutil is a generated GoMock package.
package linuxutil

import (
	reflect "reflect"

	netstat "github.com/cakturk/go-netstat/netstat"
	ethtool "github.com/safchain/ethtool"
	gomock "go.uber.org/mock/gomock"
)

// MockEthtoolInterface is a mock of EthtoolInterface interface.
type MockEthtoolInterface struct {
	ctrl     *gomock.Controller
	recorder *MockEthtoolInterfaceMockRecorder
}

// MockEthtoolInterfaceMockRecorder is the mock recorder for MockEthtoolInterface.
type MockEthtoolInterfaceMockRecorder struct {
	mock *MockEthtoolInterface
}

// NewMockEthtoolInterface creates a new mock instance.
func NewMockEthtoolInterface(ctrl *gomock.Controller) *MockEthtoolInterface {
	mock := &MockEthtoolInterface{ctrl: ctrl}
	mock.recorder = &MockEthtoolInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEthtoolInterface) EXPECT() *MockEthtoolInterfaceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockEthtoolInterface) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockEthtoolInterfaceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockEthtoolInterface)(nil).Close))
}

// StatsWithBuffer mocks base method.
func (m *MockEthtoolInterface) StatsWithBuffer(intf string, gstrings *ethtool.EthtoolGStrings, stats *ethtool.EthtoolStats) (map[string]uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatsWithBuffer", intf, gstrings, stats)
	ret0, _ := ret[0].(map[string]uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StatsWithBuffer indicates an expected call of StatsWithBuffer.
func (mr *MockEthtoolInterfaceMockRecorder) StatsWithBuffer(intf, gstrings, stats any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatsWithBuffer", reflect.TypeOf((*MockEthtoolInterface)(nil).StatsWithBuffer), intf, gstrings, stats)
}

// MockNetstatInterface is a mock of NetstatInterface interface.
type MockNetstatInterface struct {
	ctrl     *gomock.Controller
	recorder *MockNetstatInterfaceMockRecorder
}

// MockNetstatInterfaceMockRecorder is the mock recorder for MockNetstatInterface.
type MockNetstatInterfaceMockRecorder struct {
	mock *MockNetstatInterface
}

// NewMockNetstatInterface creates a new mock instance.
func NewMockNetstatInterface(ctrl *gomock.Controller) *MockNetstatInterface {
	mock := &MockNetstatInterface{ctrl: ctrl}
	mock.recorder = &MockNetstatInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetstatInterface) EXPECT() *MockNetstatInterfaceMockRecorder {
	return m.recorder
}

// TCPSocks mocks base method.
func (m *MockNetstatInterface) TCPSocks(accept netstat.AcceptFn) ([]netstat.SockTabEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TCPSocks", accept)
	ret0, _ := ret[0].([]netstat.SockTabEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TCPSocks indicates an expected call of TCPSocks.
func (mr *MockNetstatInterfaceMockRecorder) TCPSocks(accept any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TCPSocks", reflect.TypeOf((*MockNetstatInterface)(nil).TCPSocks), accept)
}

// UDPSocks mocks base method.
func (m *MockNetstatInterface) UDPSocks(accept netstat.AcceptFn) ([]netstat.SockTabEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UDPSocks", accept)
	ret0, _ := ret[0].([]netstat.SockTabEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UDPSocks indicates an expected call of UDPSocks.
func (mr *MockNetstatInterfaceMockRecorder) UDPSocks(accept any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UDPSocks", reflect.TypeOf((*MockNetstatInterface)(nil).UDPSocks), accept)
}
