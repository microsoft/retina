// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package filter

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type filterMapKey struct {
	Prefixlen uint32
	Data      uint32
}

// loadFilter returns the embedded CollectionSpec for filter.
func loadFilter() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_FilterBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load filter: %w", err)
	}

	return spec, err
}

// loadFilterObjects loads filter and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*filterObjects
//	*filterPrograms
//	*filterMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadFilterObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadFilter()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// filterSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type filterSpecs struct {
	filterProgramSpecs
	filterMapSpecs
}

// filterSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type filterProgramSpecs struct {
}

// filterMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type filterMapSpecs struct {
	RetinaFilter *ebpf.MapSpec `ebpf:"retina_filter"`
}

// filterObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadFilterObjects or ebpf.CollectionSpec.LoadAndAssign.
type filterObjects struct {
	filterPrograms
	filterMaps
}

func (o *filterObjects) Close() error {
	return _FilterClose(
		&o.filterPrograms,
		&o.filterMaps,
	)
}

// filterMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadFilterObjects or ebpf.CollectionSpec.LoadAndAssign.
type filterMaps struct {
	RetinaFilter *ebpf.Map `ebpf:"retina_filter"`
}

func (m *filterMaps) Close() error {
	return _FilterClose(
		m.RetinaFilter,
	)
}

// filterPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadFilterObjects or ebpf.CollectionSpec.LoadAndAssign.
type filterPrograms struct {
}

func (p *filterPrograms) Close() error {
	return _FilterClose()
}

func _FilterClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed filter_bpfel_x86.o
var _FilterBytes []byte
