// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package packetforward

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type packetforwardKeyType uint32

type packetforwardMetric struct {
	Count uint64
	Bytes uint64
}

// loadPacketforward returns the embedded CollectionSpec for packetforward.
func loadPacketforward() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_PacketforwardBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load packetforward: %w", err)
	}

	return spec, err
}

// loadPacketforwardObjects loads packetforward and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*packetforwardObjects
//	*packetforwardPrograms
//	*packetforwardMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadPacketforwardObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadPacketforward()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// packetforwardSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type packetforwardSpecs struct {
	packetforwardProgramSpecs
	packetforwardMapSpecs
}

// packetforwardSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type packetforwardProgramSpecs struct {
	SocketFilter *ebpf.ProgramSpec `ebpf:"socket_filter"`
}

// packetforwardMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type packetforwardMapSpecs struct {
	RetinaPacketforwardMetrics *ebpf.MapSpec `ebpf:"retina_packetforward_metrics"`
}

// packetforwardObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadPacketforwardObjects or ebpf.CollectionSpec.LoadAndAssign.
type packetforwardObjects struct {
	packetforwardPrograms
	packetforwardMaps
}

func (o *packetforwardObjects) Close() error {
	return _PacketforwardClose(
		&o.packetforwardPrograms,
		&o.packetforwardMaps,
	)
}

// packetforwardMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadPacketforwardObjects or ebpf.CollectionSpec.LoadAndAssign.
type packetforwardMaps struct {
	RetinaPacketforwardMetrics *ebpf.Map `ebpf:"retina_packetforward_metrics"`
}

func (m *packetforwardMaps) Close() error {
	return _PacketforwardClose(
		m.RetinaPacketforwardMetrics,
	)
}

// packetforwardPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadPacketforwardObjects or ebpf.CollectionSpec.LoadAndAssign.
type packetforwardPrograms struct {
	SocketFilter *ebpf.Program `ebpf:"socket_filter"`
}

func (p *packetforwardPrograms) Close() error {
	return _PacketforwardClose(
		p.SocketFilter,
	)
}

func _PacketforwardClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed packetforward_bpfel_x86.o
var _PacketforwardBytes []byte
