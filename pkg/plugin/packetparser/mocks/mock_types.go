// Code generated by MockGen. DO NOT EDIT.
// Source: types_linux.go
//
// Generated by this command:
//
//	mockgen -source=types_linux.go -destination=mocks/mock_types.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	perf "github.com/cilium/ebpf/perf"
	tc "github.com/florianl/go-tc"
	netlink "github.com/mdlayher/netlink"
	gomock "go.uber.org/mock/gomock"
)

// Mockqdisc is a mock of qdisc interface.
type Mockqdisc struct {
	ctrl     *gomock.Controller
	recorder *MockqdiscMockRecorder
}

// MockqdiscMockRecorder is the mock recorder for Mockqdisc.
type MockqdiscMockRecorder struct {
	mock *Mockqdisc
}

// NewMockqdisc creates a new mock instance.
func NewMockqdisc(ctrl *gomock.Controller) *Mockqdisc {
	mock := &Mockqdisc{ctrl: ctrl}
	mock.recorder = &MockqdiscMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockqdisc) EXPECT() *MockqdiscMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *Mockqdisc) Add(info *tc.Object) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", info)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockqdiscMockRecorder) Add(info any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*Mockqdisc)(nil).Add), info)
}

// Delete mocks base method.
func (m *Mockqdisc) Delete(info *tc.Object) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", info)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockqdiscMockRecorder) Delete(info any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*Mockqdisc)(nil).Delete), info)
}

// Mockfilter is a mock of filter interface.
type Mockfilter struct {
	ctrl     *gomock.Controller
	recorder *MockfilterMockRecorder
}

// MockfilterMockRecorder is the mock recorder for Mockfilter.
type MockfilterMockRecorder struct {
	mock *Mockfilter
}

// NewMockfilter creates a new mock instance.
func NewMockfilter(ctrl *gomock.Controller) *Mockfilter {
	mock := &Mockfilter{ctrl: ctrl}
	mock.recorder = &MockfilterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockfilter) EXPECT() *MockfilterMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *Mockfilter) Add(info *tc.Object) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", info)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockfilterMockRecorder) Add(info any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*Mockfilter)(nil).Add), info)
}

// Mocknltc is a mock of nltc interface.
type Mocknltc struct {
	ctrl     *gomock.Controller
	recorder *MocknltcMockRecorder
}

// MocknltcMockRecorder is the mock recorder for Mocknltc.
type MocknltcMockRecorder struct {
	mock *Mocknltc
}

// NewMocknltc creates a new mock instance.
func NewMocknltc(ctrl *gomock.Controller) *Mocknltc {
	mock := &Mocknltc{ctrl: ctrl}
	mock.recorder = &MocknltcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocknltc) EXPECT() *MocknltcMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *Mocknltc) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MocknltcMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*Mocknltc)(nil).Close))
}

// Filter mocks base method.
func (m *Mocknltc) Filter() *tc.Filter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Filter")
	ret0, _ := ret[0].(*tc.Filter)
	return ret0
}

// Filter indicates an expected call of Filter.
func (mr *MocknltcMockRecorder) Filter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*Mocknltc)(nil).Filter))
}

// Qdisc mocks base method.
func (m *Mocknltc) Qdisc() *tc.Qdisc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Qdisc")
	ret0, _ := ret[0].(*tc.Qdisc)
	return ret0
}

// Qdisc indicates an expected call of Qdisc.
func (mr *MocknltcMockRecorder) Qdisc() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Qdisc", reflect.TypeOf((*Mocknltc)(nil).Qdisc))
}

// SetOption mocks base method.
func (m *Mocknltc) SetOption(arg0 netlink.ConnOption, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOption", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetOption indicates an expected call of SetOption.
func (mr *MocknltcMockRecorder) SetOption(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOption", reflect.TypeOf((*Mocknltc)(nil).SetOption), arg0, arg1)
}

// MockperfReader is a mock of perfReader interface.
type MockperfReader struct {
	ctrl     *gomock.Controller
	recorder *MockperfReaderMockRecorder
}

// MockperfReaderMockRecorder is the mock recorder for MockperfReader.
type MockperfReaderMockRecorder struct {
	mock *MockperfReader
}

// NewMockperfReader creates a new mock instance.
func NewMockperfReader(ctrl *gomock.Controller) *MockperfReader {
	mock := &MockperfReader{ctrl: ctrl}
	mock.recorder = &MockperfReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockperfReader) EXPECT() *MockperfReaderMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockperfReader) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockperfReaderMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockperfReader)(nil).Close))
}

// Read mocks base method.
func (m *MockperfReader) Read() (perf.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read")
	ret0, _ := ret[0].(perf.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockperfReaderMockRecorder) Read() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockperfReader)(nil).Read))
}
