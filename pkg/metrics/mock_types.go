// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=mock_types.go -package=metrics
//

// Package metrics is a generated GoMock package.
package metrics

import (
	reflect "reflect"

	prometheus "github.com/prometheus/client_golang/prometheus"
	io_prometheus_client "github.com/prometheus/client_model/go"
	gomock "go.uber.org/mock/gomock"
)

// MockCounterVec is a mock of CounterVec interface.
type MockCounterVec struct {
	ctrl     *gomock.Controller
	recorder *MockCounterVecMockRecorder
}

// MockCounterVecMockRecorder is the mock recorder for MockCounterVec.
type MockCounterVecMockRecorder struct {
	mock *MockCounterVec
}

// NewMockCounterVec creates a new mock instance.
func NewMockCounterVec(ctrl *gomock.Controller) *MockCounterVec {
	mock := &MockCounterVec{ctrl: ctrl}
	mock.recorder = &MockCounterVecMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCounterVec) EXPECT() *MockCounterVecMockRecorder {
	return m.recorder
}

// GetMetricWithLabelValues mocks base method.
func (m *MockCounterVec) GetMetricWithLabelValues(lvs ...string) (prometheus.Counter, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range lvs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMetricWithLabelValues", varargs...)
	ret0, _ := ret[0].(prometheus.Counter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetricWithLabelValues indicates an expected call of GetMetricWithLabelValues.
func (mr *MockCounterVecMockRecorder) GetMetricWithLabelValues(lvs ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricWithLabelValues", reflect.TypeOf((*MockCounterVec)(nil).GetMetricWithLabelValues), lvs...)
}

// WithLabelValues mocks base method.
func (m *MockCounterVec) WithLabelValues(lvs ...string) prometheus.Counter {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range lvs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WithLabelValues", varargs...)
	ret0, _ := ret[0].(prometheus.Counter)
	return ret0
}

// WithLabelValues indicates an expected call of WithLabelValues.
func (mr *MockCounterVecMockRecorder) WithLabelValues(lvs ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithLabelValues", reflect.TypeOf((*MockCounterVec)(nil).WithLabelValues), lvs...)
}

// MockGaugeVec is a mock of GaugeVec interface.
type MockGaugeVec struct {
	ctrl     *gomock.Controller
	recorder *MockGaugeVecMockRecorder
}

// MockGaugeVecMockRecorder is the mock recorder for MockGaugeVec.
type MockGaugeVecMockRecorder struct {
	mock *MockGaugeVec
}

// NewMockGaugeVec creates a new mock instance.
func NewMockGaugeVec(ctrl *gomock.Controller) *MockGaugeVec {
	mock := &MockGaugeVec{ctrl: ctrl}
	mock.recorder = &MockGaugeVecMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGaugeVec) EXPECT() *MockGaugeVecMockRecorder {
	return m.recorder
}

// GetMetricWithLabelValues mocks base method.
func (m *MockGaugeVec) GetMetricWithLabelValues(lvs ...string) (prometheus.Gauge, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range lvs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMetricWithLabelValues", varargs...)
	ret0, _ := ret[0].(prometheus.Gauge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetricWithLabelValues indicates an expected call of GetMetricWithLabelValues.
func (mr *MockGaugeVecMockRecorder) GetMetricWithLabelValues(lvs ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricWithLabelValues", reflect.TypeOf((*MockGaugeVec)(nil).GetMetricWithLabelValues), lvs...)
}

// WithLabelValues mocks base method.
func (m *MockGaugeVec) WithLabelValues(lvs ...string) prometheus.Gauge {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range lvs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WithLabelValues", varargs...)
	ret0, _ := ret[0].(prometheus.Gauge)
	return ret0
}

// WithLabelValues indicates an expected call of WithLabelValues.
func (mr *MockGaugeVecMockRecorder) WithLabelValues(lvs ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithLabelValues", reflect.TypeOf((*MockGaugeVec)(nil).WithLabelValues), lvs...)
}

// MockHistogram is a mock of Histogram interface.
type MockHistogram struct {
	ctrl     *gomock.Controller
	recorder *MockHistogramMockRecorder
}

// MockHistogramMockRecorder is the mock recorder for MockHistogram.
type MockHistogramMockRecorder struct {
	mock *MockHistogram
}

// NewMockHistogram creates a new mock instance.
func NewMockHistogram(ctrl *gomock.Controller) *MockHistogram {
	mock := &MockHistogram{ctrl: ctrl}
	mock.recorder = &MockHistogramMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHistogram) EXPECT() *MockHistogramMockRecorder {
	return m.recorder
}

// Observe mocks base method.
func (m *MockHistogram) Observe(arg0 float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Observe", arg0)
}

// Observe indicates an expected call of Observe.
func (mr *MockHistogramMockRecorder) Observe(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Observe", reflect.TypeOf((*MockHistogram)(nil).Observe), arg0)
}

// Write mocks base method.
func (m *MockHistogram) Write(arg0 *io_prometheus_client.Metric) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockHistogramMockRecorder) Write(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockHistogram)(nil).Write), arg0)
}
