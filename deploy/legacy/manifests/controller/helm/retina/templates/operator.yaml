{{- if .Values.operator.enabled -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.operator.name }}
  namespace: {{ .Values.namespace }}
  labels:
    app: {{ .Values.operator.name }}
    control-plane: {{ .Values.operator.name }}
    app.kubernetes.io/name: deployment
    app.kubernetes.io/instance: {{ .Values.operator.name }}
    app.kubernetes.io/component: {{ .Values.operator.name }}
    app.kubernetes.io/created-by: operator
    app.kubernetes.io/part-of: operator
    app.kubernetes.io/managed-by: kustomize
spec:
  selector:
    matchLabels:
      control-plane: {{ .Values.operator.name }}
  replicas: 1
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: {{ .Values.operator.name }}
        prometheus.io/port: "{{ .Values.operatorService.port }}"
        prometheus.io/scrape: "true"
      labels:
        app: {{ .Values.operator.name }}
        control-plane: {{ .Values.operator.name }}
    spec:
      # TODO(user): Uncomment the following code to configure the nodeAffinity expression
      # according to the platforms which are supported by your solution.
      # It is considered best practice to support multiple architectures. You can
      # build your manager image using the makefile target docker-buildx.
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: kubernetes.io/arch
                    operator: In
                    values:
                      - amd64
                      #- arm64
                      #- ppc64le
                      #- s390x
                  - key: kubernetes.io/os
                    operator: In
                    values:
                      - linux
                      #- windows
      securityContext:
        runAsNonRoot: true
      containers:
        - image: {{ .Values.operator.repository }}:{{ .Values.operator.tag }}
          name: {{ .Values.operator.name }}
          {{- if .Values.operator.container.command }}
          command:
          {{- range .Values.operator.container.command }}
          - {{ . }}
          {{- end }}
          {{- end }}
          {{- if .Values.operator.container.args}}
          ports:
          - containerPort: {{ .Values.operatorService.port }}
            name: {{ .Values.operatorService.name }}
          args:
          {{- range $.Values.operator.container.args}}
          - {{ . | quote }}
          {{- end}}
          {{- end}}
          volumeMounts:
            - name: "{{ .Values.operator.name }}-config"
              mountPath: /retina/
{{- if .Values.capture.enableManagedStorageAccount }}
            - name: cloud-config
              mountPath: /etc/cloud-config
              readOnly: true
{{- end }}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - "ALL"
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8081
            initialDelaySeconds: 15
            periodSeconds: 20
          readinessProbe:
            httpGet:
              path: /readyz
              port: 8081
            initialDelaySeconds: 5
            periodSeconds: 10
          resources:
            {{- toYaml .Values.operator.resources | nindent 12 }}
      serviceAccountName: {{ .Values.operator.name }}
      {{- if .Values.operator.priorityClassName }}
      priorityClassName: {{ .Values.operator.priorityClassName }}
      {{- end }}
      terminationGracePeriodSeconds: 10
      volumes:
        - name: "{{ .Values.operator.name }}-config"
          configMap:
            name: "{{ .Values.operator.name }}-config"
{{- if .Values.capture.enableManagedStorageAccount }}
        - name: cloud-config
          secret:
            secretName: azure-cloud-config
{{- end }}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/name: serviceaccount
    app.kubernetes.io/instance: {{ .Values.operator.name }}
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: operator
    app.kubernetes.io/part-of: operator
    app.kubernetes.io/managed-by: kustomize
  name: {{ .Values.operator.name }}
  namespace: {{ .Values.namespace }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: "{{ .Values.operator.name }}-role"
rules:
  - apiGroups: 
      - "apiextensions.k8s.io"
    resources: 
      - "customresourcedefinitions"
    verbs: 
      - "create"
      - "get"
      - "update"
      - "delete"
      - "patch"
  - apiGroups:
    - ""
    resources:
      - pods
    verbs:
      - get
      - list
      - watch
  - apiGroups:
    - ""
    resources:
      - namespaces
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - retina.sh
    resources:
      - retinaendpoints
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - retina.sh
    resources:
      - metricsconfigurations
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - retina.sh
    resources:
      - metricsconfigurations/status
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - retina.sh
    resources:
      - retinaendpoints/finalizers
    verbs:
      - update
  - apiGroups:
      - retina.sh
    resources:
      - retinaendpoints/status
    verbs:
      - get
      - patch
      - update
  - apiGroups:
      - ""
    resources:
    - namespaces
    - pods
    - nodes
    verbs:
    - get
    - list
  - apiGroups:
      - ""
    resources:
    - secrets
    verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
      - batch
    resources:
    - jobs
    verbs:
    - create
    - delete
    - deletecollection
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
      - batch
    resources:
    - jobs/status
    verbs:
    - get
  - apiGroups:
    - retina.sh
    resources:
    - captures
    verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
      - retina.sh
    resources:
    - captures/finalizers
    verbs:
    - update
  - apiGroups:
      - retina.sh
    resources:
    - captures/status
    verbs:
    - get
    - patch
    - update

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/name: clusterrolebinding
    app.kubernetes.io/instance: "{{ .Values.operator.name }}-rolebinding"
    app.kubernetes.io/component: rbac
    app.kubernetes.io/created-by: operator
    app.kubernetes.io/part-of: operator
    app.kubernetes.io/managed-by: kustomize
  name: "{{ .Values.operator.name }}-rolebinding"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: "{{ .Values.operator.name }}-role"
subjects:
- kind: ServiceAccount
  name: {{ .Values.operator.name }}
  namespace: {{ .Values.namespace }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: "{{ .Values.operator.name }}-config"
  namespace: {{ .Values.namespace }}
data:
  operator-config.yaml: |-
    installCRDs: {{ .Values.operator.installCRDs }}
    enableTelemetry: {{ .Values.enableTelemetry }}
    remoteContext: {{ .Values.remoteContext }}
    captureDebug: {{ .Values.capture.debug }}
    captureJobNumLimit: {{ .Values.capture.jobNumLimit }}
    enableManagedStorageAccount: {{ .Values.capture.enableManagedStorageAccount }}
{{- if .Values.capture.enableManagedStorageAccount }}
    azureCredentialConfig: /etc/cloud-config/azure.json
{{- end }}
---
{{- if .Values.capture.enableManagedStorageAccount }}
apiVersion: v1
kind: Secret
metadata:
  name: azure-cloud-config
  namespace: {{ .Values.namespace }}
type: Opaque
stringData:
  azure.json: |-
    {
{{- if .Values.capture.managedIdentityClientId }}
      "useManagedIdentityExtension": true,
      "aadClientId": "msi",
      "aadClientSecret": "msi",
      "userAssignedIdentityID": "{{ .Values.capture.managedIdentityClientId }}",
{{- else }}
      "useManagedIdentityExtension": false,
      "aadClientId": "{{ .Values.capture.aadClientId }}",
      "aadClientSecret": "{{ .Values.capture.aadClientSecret }}",
      "userAssignedIdentityID": "",
{{- end }}
      "useInstanceMetadata": true,
      "cloud": "AzurePublicCloud",
      "tenantId": "{{ .Values.capture.tenantId }}",
      "subscriptionId": "{{ .Values.capture.subscriptionId }}",
      "resourceGroup": "{{ .Values.capture.resourceGroup }}",
      "location": "{{ .Values.capture.location }}"
    }
{{- end }}
{{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.operator.name }}
  namespace: {{ .Values.namespace }}
  labels:
    app: {{ .Values.operator.name }}
spec:
  ports:
  - name: {{ .Values.operatorService.name }}
    port: {{ .Values.operatorService.port }}
    protocol: TCP
    targetPort: {{ .Values.operatorService.targetPort }}
  selector:
      app: {{ .Values.operator.name }}
      control-plane: {{ .Values.operator.name }}
---
{{- if .Values.metrics.serviceMonitor.enabled }}
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: "{{ .Values.operator.name }}-servicemonitor"
  namespace: {{ ternary .Values.metrics.serviceMonitor.namespace .Values.namespace (not (empty .Values.metrics.serviceMonitor.namespace)) }}
  labels:
    app: {{ .Values.operator.name }}
    {{- if .Values.metrics.serviceMonitor.additionalLabels }}
    {{- toYaml .Values.metrics.serviceMonitor.additionalLabels | nindent 4 }}
    {{- end }}
spec:
  endpoints:
    - targetPort: retina-operator
      path: /metrics
      {{- if .Values.metrics.serviceMonitor.interval }}
      interval: {{ .Values.metrics.serviceMonitor.interval }}
      {{- end }}
      {{- if .Values.metrics.serviceMonitor.scrapeTimeout }}
      scrapeTimeout: {{ .Values.metrics.serviceMonitor.scrapeTimeout }}
      {{- end }}
      {{- if .Values.metrics.serviceMonitor.scheme }}
      scheme: {{ .Values.metrics.serviceMonitor.scheme }}
      {{- end }}
      {{- if .Values.metrics.serviceMonitor.tlsConfig }}
      tlsConfig: {{- .Values.metrics.serviceMonitor.tlsConfig | nindent 8 }}
      {{- end }}
      {{- if .Values.metrics.serviceMonitor.relabelings }}
      relabelings: 
      {{- toYaml .Values.metrics.serviceMonitor.relabelings | nindent 8 }}
      {{- end }}
      {{- if .Values.metrics.serviceMonitor.metricRelabelings }}
      metricRelabelings: 
      {{- toYaml .Values.metrics.serviceMonitor.metricRelabelings | nindent 8 }}
      {{- end }}
  namespaceSelector:
    matchNames:
      - {{ .Values.namespace }}
  selector:
    matchLabels:
      app: {{ .Values.operator.name }}
{{- end }}
